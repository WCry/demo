
CompletableFuture的底层默认使用的ForkJoinThreadPool,也可以在异步提交的时候执行任务的
时候进行指定
提交任务的方法
CompletableFuture.runAsync()
发起一个异步执行任务，需要返回结果,
CompletableFuture.supplyAsync

判断多个任务执行的时候使用
多个任务等待任务全部完成，然后继续向下执行
CompletableFuture.allOf()
多个任务中其中有一个任务完成就返回结果
CompletableFuture.anyOf

编排任务执行顺序的时候执行
正常情况下会继续向下执行，当出现异常的时候不在继续向下执行，只有handle的可以继续向下执行
并且对于异常进行处理
执行一个任务并且，返回一个新的对象
future.thenApply()
当任务执行完成之后进行处理，能够包含异常，如果有异常可以决定是否还需要执行,
可以对于结果进行转换
future.handle()
当任务执行完成之后,同时也可以如果出现异常,应该如何进行处理异常,不能对于异常进行转换
future.whenCompleteAsync()
在任务执行完成的之后执行下一个任务
运行一个可以执行Runnable的对象，没有返回结果
future.thenRun()
两个任务任意一个执行完成之后都可以继续下一个执行
future.applyToEither()
当任务结束的时候进行执行，将任务结果进行转换
future.thenCompose()
accept当前程序执行完成，有一个消费结果的代码，不进行返回结果 apply代表消费结果作为下一步执行的参数
future.acceptEither()
任务当中任何一个技术执行下一个
future.runAfterEither
等待两个任务都结束然后执行下一步操作
future.runAfterBoth()
同时执行两个任务，当任务结束的使用进行合并结果
future.thenCombine()
阻塞等待执行结束,得到结果
future1.get()
要求立马进行返回，如果没有操作完成，按照传入的默认值进行返回
future1.getNow()
将一个对象包装成为CompletableFuture
CompletableFuture.completedFuture()
阻塞等待任务完成
future1.join()
如果任务完成，则返回结果，如果任务没有完成按照给定的异常进行返回
completeExceptionally.completeExceptionally(Throwable ex);
不论是否执行完成,全部按照指定的方式进行返回结果
public void obtrudeValue(T value) 和 public void obtrudeException(Throwable ex)

apply对应的接口主要是，对于上一步的结果可以进行消费，然后得到新的结果
accept对应的接口是,对于上一步的结果进行消费,不需要返回结果
Then基本代表执行完成之后,进行下一部操作。

除了handle和whenComplete其他的在发生异常的时候，都不会进行执行，在Get的时候会抛出错误。
可以利用isCompletedExceptionally判断对象是否是完整的执行，然后决定是否需要获取结果
实现发送超时快速进行处理
https://blog.csdn.net/MaiDouYT/article/details/107995030