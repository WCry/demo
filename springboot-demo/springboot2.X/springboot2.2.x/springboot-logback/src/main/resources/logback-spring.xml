<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF ，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<!-- SpringBoot中默认配置ERROR、WARN和INFO级别的日志输出到控制台 -->

<!-- scan="true"当配置文件发生变化时，logback会重新加载，默认值为true -->
<!-- scanPeriod="10 seconds表示每间隔多少秒就扫描配置文件是否发生改变，默认60秒 -->
<!-- debug="false"表示是否打印logback内部日志信息，实时查看logback运行状态，默认值为false -->
<!-- contextName：每个logger都关联到logger上下文，默认上下文名称为default，但可以使用设置成其他名字，用于区分不同应用程序的记录，一旦设置，不能修改，可以通过%contextName来打印日志上下文名称 -->
<!-- property：自定义变量，name为变量名，value为变量值，使用${}来使用变量 -->
<!-- appender：指定日志输出策略；name表示策略名称；class表示何种策略；ch.qos.logback.core.ConsoleAppender是对应的控制台输出策略；ch.qos.logback.core.rolling.RollingFileAppender是对应的文件输出策略 -->
<!-- filter：可以将指定日志级别以下的日志过滤掉；ch.qos.logback.classic.filter.ThresholdFilter为系统自带的过滤器 -->
<!-- encoder：指定日志输出的格式 -->
<!-- file：用来指定日志输出到文件的位置 -->
<!-- rollingPolicy：表示日志切割策略 -->
<!-- fileNamePattern：定义了日志的切割方式，把每一天的日志归档到一个文件中 -->
<!-- timeBasedFileNamingAndTriggeringPolicy： -->
<!-- maxFileSize：用于指定日志文件的上限大小，到了这个上限值，就会删除旧的日志 -->
<!-- maxHistory：表示只保存最近多少天的日志，以防止日志填满整个磁盘空间，例如${log_path}/debug/log-debug-%d{yyyy-MM-dd}.%i.log -->
<!-- root：是必选节点，用来指定最基础的日志输出级别，只有level属性 -->
<!-- appender-ref：用来指定向哪输出日志 -->
<!-- logger：用来指定某一个包或者具体的类的日志打印级别以及指定<appender>，addtivity：是否向上级logger传递打印信息，默认是true，appender-ref表示想什么地方打印日志信息，例如<logger name="org.springframework.web" level="warn"/> -->
<!-- springProfile：用来指定不同环境来使不同的日志输出，多个环境使用同一springProfile用,隔开在application.properties文件中通过spring.profiles.active来指定当前使用的环境 -->

<configuration scan="true" scanPeriod="10 seconds" debug="false">
    <include resource="org/springframework/boot/logging/logback/base.xml"/>

    <contextName>logback</contextName>
    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
    <property name="log_path" value="/log"/><!-- 如果在Windows环境下使用/开头的路径，将会被指定到项目所在的盘符 -->
    <property name="log_pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level --- [%thread] %logger{50} - %msg%n"/>
    <property name="log_fileNamePattern" value="-%d{yyyy-MM-dd}.%i.log"/>
    <property name="log_maxFileSize" value="100MB"/>
    <property name="log_maxHistory" value="15"/>

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE"
              value="${CONSOLE:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
         <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder charset="UTF-8">
            <pattern>${log_pattern}</pattern>
        </encoder>
    </appender>

    <!--输出到app.log文件-->
    <appender name="APP" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log_path}/app.log</file>
        <!--日志文件输出格式-->
        <encoder charset="UTF-8">
            <pattern>${log_pattern}</pattern>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${log_path}/app${log_fileNamePattern}</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${log_maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>${log_maxHistory}</maxHistory>
        </rollingPolicy>
    </appender>

    <!--输出到sql.log文件-->
    <appender name="SQL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log_path}/sql.log</file>
        <!--日志文件输出格式-->
        <encoder charset="UTF-8">
            <pattern>${log_pattern}</pattern>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${log_path}/sql-${log_fileNamePattern}</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${log_maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>${log_maxHistory}</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 自定义包日志级别要加上additivity="false"，表示不会向上传递 -->
    <logger name="org.springframework">
        <level value="WARN"/>
    </logger>
    <logger name="org.apache" additivity="false">
        <level value="WARN"/>
    </logger>
    <logger name="org.mybatis" additivity="false">
        <level value="WARN"/>
    </logger>

    <!-- 以下是mapper的sql配置,不同项目放自己的dao包名 -->
    <logger name="com.wyj.mapper" level="DEBUG" additivity="false">
        <appender-ref ref="SQL" />
    </logger>
    <logger name="com.wyj.interceptor.SqlStatementInterceptor" level="INFO" additivity="false">
        <appender-ref ref="SQL" />
        <appender-ref ref="APP" />
        <appender-ref ref="CONSOLE" />
    </logger>

    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、
        以及指定<appender>。<logger>仅有一个name属性，
        一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
              如果未设置此属性，那么当前logger将会继承上级的级别。
        addtivity:是否向上级logger传递打印信息。默认是true。
    -->
    <!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
     -->

    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL。默认是DEBUG
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->

    <!--开发环境:打印控制台-->
    <!--<springProfile name="dev">-->
    <!--<logger name="com.nmys.view" level="debug"/>-->
    <!--</springProfile>-->

    <root level="INFO">
        <appender-ref ref="APP"/>
    </root>

    <!--生产环境:输出到文件-->
    <!--<springProfile name="pro">-->
    <!--<root level="info">-->
    <!--<appender-ref ref="CONSOLE" />-->
    <!--<appender-ref ref="APP" />-->
    <!--</root>-->
    <!--</springProfile>-->
</configuration>